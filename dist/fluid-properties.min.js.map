{"version":3,"file":"fluid-properties.min.js","sources":["../src/data/constants.js","../src/eos/eosParameters.js","../src/eos/getEOSParameters.js","../src/eos/phase.js","../src/eos/getEOS.js","../src/data/molecules.js","../src/molecularFluid/from/handleError.js","../src/molecularFluid/molecularFluid.js","../src/molecularFluid/from/molecularFluidFromName.js","../src/molecularFluid/from/molecularFluidFromFormula.js"],"sourcesContent":["export const R = 8.314e-5; // ideal gas constant\n","import {\n  getVDWParameters,\n  getPRParameters,\n  getRKParameters,\n  getRKSParameters,\n} from './getEOSParameters.js';\n\n/**\n * Stores the parametrization of EOS\n *\n * @export\n * @class EOSParameters\n */\nexport class EOSParameters {\n  /**\n   *Creates an instance of EOSParameters.\n   * @param {MolecularFluid} molecularFluid instance of the MolecularFluid class\n   * @param {Object} [options={}]\n   * @param {Number} options.temperature temperature in K. Defaults to 298.\n   * @param {String} options.eos Type of the equation of states (EOS). Available options: pr (Peng-Robinson), vdw (Van der Waals), rk (Redlich窶適wong), rks (Redlich窶適wong-Soave). Defaults to pr.\n   * @memberof EOSParameters\n   */\n  constructor(molecularFluid, options = {}) {\n    let { temperature = 298, eos = 'pr' } = options;\n    this.eos = eos;\n    this.temperature = temperature;\n    this.A = null;\n    this.B = null;\n    this.alpha = null;\n    this.beta = null;\n    this.gamma = null;\n    this.p = null;\n    this.q = null;\n    this.Delta = null;\n    let parameters;\n\n    switch (eos) {\n      case 'vdw':\n        parameters = getVDWParameters(molecularFluid);\n        break;\n      case 'pr':\n        parameters = getPRParameters(molecularFluid, temperature);\n        break;\n      case 'rk':\n        parameters = getRKParameters(molecularFluid, temperature);\n        break;\n      case 'rks':\n        parameters = getRKSParameters(molecularFluid, temperature);\n        break;\n      default:\n        throw new Error('Unkown EOS type');\n    }\n\n    this.a = parameters.a;\n    this.b = parameters.b;\n    this.S = parameters.S;\n    this.k = parameters.k;\n    this.u = parameters.u;\n    this.w = parameters.w;\n  }\n}\n","import { R } from '../data/constants.js';\n\nexport function getVDWParameters(molecularFluid) {\n  const parameters = {\n    a:\n      (0.421875 * R ** 2 * molecularFluid.criticalTemperature ** 2) /\n      molecularFluid.criticalPressure,\n    b: (0.125 * R * molecularFluid.tc) / molecularFluid.pc,\n    S: null,\n    k: 1,\n    u: 1,\n    w: 0,\n  };\n  return parameters;\n}\n\nexport function getRKParameters(molecularFluid, temperature) {\n  const parameters = {\n    a:\n      (0.42748 * R ** 2 * molecularFluid.criticalTemperature ** 2) /\n      molecularFluid.criticalPressure /\n      Math.sqrt(temperature / molecularFluid.criticalTemperature),\n    b:\n      (0.08664 * R * molecularFluid.criticalTemperature) /\n      molecularFluid.criticalPressure,\n    S: null,\n    k: 1,\n    u: 1,\n    w: 0,\n  };\n  return parameters;\n}\n\nexport function getRKSParameters(molecularFluid, temperature) {\n  const s =\n    0.48 +\n    1.574 * molecularFluid.accentricFactor -\n    0.176 * molecularFluid.accentricFactor ** 2;\n  const parameters = {\n    a:\n      (0.42748 * R ** 2 * molecularFluid.criticalTemperature ** 2) /\n      molecularFluid.criticalPressure,\n    b:\n      (0.08664 * R * molecularFluid.criticalTemperature) /\n      molecularFluid.criticalPressure,\n    S: s,\n    k:\n      (1 +\n        s *\n          (1 - Math.sqrt(temperature / molecularFluid.criticalTemperature))) **\n      2,\n    u: 1,\n    w: 0,\n  };\n  return parameters;\n}\n\nexport function getPRParameters(molecularFluid, temperature) {\n  const s =\n    0.37464 +\n    1.54226 * molecularFluid.accentricFactor -\n    0.26992 * molecularFluid.accentricFactor ** 2;\n  const parameters = {\n    a:\n      (0.45724 * R ** 2 * molecularFluid.criticalTemperature ** 2) /\n      molecularFluid.criticalPressure,\n    b:\n      (0.0778 * R * molecularFluid.criticalTemperature) /\n      molecularFluid.criticalPressure,\n    S: s,\n    k:\n      (1 +\n        s *\n          (1 - Math.sqrt(temperature / molecularFluid.criticalTemperature))) **\n      2,\n    u: 2,\n    w: -1,\n  };\n  return parameters;\n}\n","/**\n * Based on comparing the parameters to the critical constants\n * return which phase the system is in\n *\n * @export\n * @param {MolecularFluid} molecularFluid instance of the MolecularFluid class\n * @param {Number} temperature in K\n * @param {Numnber} pressure in bar\n * @param {Number} volumen in L\n * @returns {String} \"supercritial\", \"gas\", or \"liquid\" or null\n */\nexport function getPhase(molecularFluid, temperature, pressure, volume) {\n  let phase = null;\n  if (\n    (temperature > molecularFluid.criticalTemperature) &\n    (pressure > molecularFluid.criticalPressure)\n  ) {\n    phase = 'supercritical';\n  } else {\n    if (molecularFluid.criticalVolume) {\n      if (volume > molecularFluid.criticalVolume) phase = 'gas';\n    } else {\n      phase = 'liquid';\n    }\n  }\n  return phase;\n}\n\n/**\n * Comparing an array of fugacities to find out in which\n * state the system is\n * @export\n * @param {Array<number>} phis An array of fugacities\n * @returns {Number} Index of the state the system is in\n */\nexport function getPhasefromPhi(phis) {\n  if (phis.length === 1) {\n    return 0;\n  } else {\n    if (phis[1] < phis[0]) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n}\n","import { R } from '../data/constants.js';\n\nimport { EOSParameters } from './eosParameters';\nimport { getPhasefromPhi } from './phase.js';\n\n/**\n * Based on a MolecularFluid, temperature, and pressure or volume and\n * the choice of equation of state (EOS) return the thermodynamic properties\n * of the system\n *\n * @export\n * @param {MolecularFluid} molecularFluid instance of the MolecularFluid class\n * @param {Number} temperature in Kelvin\n * @param {Object} [options={}]\n * @param {Number} options.pressure in bar\n * @param {Number} options.volume in L\n * @param {String} otpions.eos Type of the equation of states (EOS). Available options: pr (Peng-Robinson), vdw (Van der Waals), rk (Redlich窶適wong), rks (Redlich窶適wong-Soave). Defaults to pr.\n * @returns {Object}\n */\nexport function getProperties(molecularFluid, temperature, options = {}) {\n  let { pressure = 1, volume = null, eos = 'pr' } = options;\n  validateInput(pressure, volume);\n\n  let eosParameters = new EOSParameters(molecularFluid, temperature, {\n    eos: eos,\n  });\n\n  eosParameters.relativeTemperature =\n    temperature / molecularFluid.criticalTemperature;\n\n  if (Number.isFinite(volume) & !Number.isFinite(pressure)) {\n    pressure = getPressure(eosParameters, temperature, volume);\n  }\n\n  updateEOSParameters(eosParameters, pressure, temperature);\n\n  let zList = solveZ(eosParameters);\n  let phaseProperties = getThermodynamicProperties(\n    zList,\n    eosParameters,\n    eos,\n    molecularFluid,\n    pressure,\n    temperature,\n  );\n  let phis = [];\n  phaseProperties.forEach((properties) => {\n    phis.push(properties.fugacityCoefficient);\n  });\n\n  return {\n    temperature: temperature,\n    pressure: pressure,\n    phaseProperties: phaseProperties,\n    zList: zList,\n    inPhase: getPhasefromPhi(phis),\n  };\n}\n\nfunction validateInput(volume, pressure) {\n  if (Number.isFinite(volume) & Number.isFinite(pressure)) {\n    throw new Error('You need to specify pressure OR volume, not both!');\n  }\n\n  if (!Number.isFinite(volume) & !Number.isFinite(pressure)) {\n    throw new Error('You need to specify pressure or volume!');\n  }\n}\n\nfunction getPressure(eosParameters, temperature, volume) {\n  return (\n    (R * temperature) / (volume - eosParameters.b) -\n    eosParameters.a /\n      (volume ** 2 +\n        eosParameters.u * eosParameters.b * volume +\n        eosParameters.w * eosParameters.b ** 2)\n  );\n}\n\nfunction updateEOSParameters(eosParameters, pressure, temperature) {\n  eosParameters.A =\n    (eosParameters.a * eosParameters.k * pressure) / R ** 2 / temperature ** 2;\n  eosParameters.B = (eosParameters.b * pressure) / R / temperature;\n\n  eosParameters.alpha =\n    -1 - eosParameters.B + eosParameters.u * eosParameters.B;\n  eosParameters.beta =\n    eosParameters.A +\n    eosParameters.w * eosParameters.B ** 2 -\n    eosParameters.u * eosParameters.B -\n    eosParameters.u * eosParameters.B ** 2;\n  eosParameters.gamma =\n    -eosParameters.A * eosParameters.B -\n    eosParameters.w * eosParameters.B ** 2 -\n    eosParameters.w * eosParameters.B ** 3;\n\n  eosParameters.p = eosParameters.beta - eosParameters.alpha ** 2 / 3;\n  eosParameters.q =\n    (2 * eosParameters.alpha ** 3) / 27 -\n    (eosParameters.alpha * eosParameters.beta) / 3 +\n    eosParameters.gamma;\n  eosParameters.Delta = eosParameters.q ** 2 / 4 + eosParameters.p ** 3 / 27;\n}\n\n/**\n *Some background here https://pubs.acs.org/doi/pdf/10.1021/ie2023004\n *\n */\nfunction solveZ(eosParameters) {\n  // Cardano solution formula\n  let zList = [];\n  if (eosParameters.Delta > 0) {\n    zList = solveCardano(eosParameters);\n  } else {\n    zList = solveTrigonometric(eosParameters);\n  }\n  return zList;\n}\n\nfunction solveCardano(eosParameters) {\n  let xSol;\n  let zList = [];\n  xSol =\n    Math.cbrt(-eosParameters.q / 2 + Math.sqrt(eosParameters.Delta)) +\n    Math.cbrt(-eosParameters.q / 2 - Math.sqrt(eosParameters.Delta));\n  zList = [xSol - eosParameters.alpha / 3];\n  return zList;\n}\n\nfunction solveTrigonometric(eosParameters) {\n  let xSol;\n  let zList = [];\n\n  let subeq = Math.acos(\n    ((3 * eosParameters.q) / 2 / eosParameters.p) *\n      Math.sqrt(-3 / eosParameters.p),\n  );\n\n  for (let offset = 0; offset < 3; offset++) {\n    xSol =\n      2 *\n      Math.sqrt(-eosParameters.p / 3) *\n      Math.cos(subeq / 3 - (2 * Math.PI * offset) / 3);\n    zList.push(xSol - eosParameters.alpha / 3);\n  }\n  zList.sort(); // [ z_liq, z_meaningless, z_vap ]\n  //remove the meaningless value\n  zList.splice(1, 1);\n  return zList;\n}\n\nfunction getThermodynamicProperties(\n  zList,\n  eosParameters,\n  eos,\n  molecularFluid,\n  pressure,\n  temperature,\n) {\n  let phaseProperties = [];\n  switch (eos) {\n    case 'pr':\n      zList.forEach((z) => {\n        phaseProperties.push(\n          getThermodynamicPropertiesPR(\n            z,\n            eosParameters,\n            molecularFluid,\n            pressure,\n            temperature,\n          ),\n        );\n      });\n      break;\n    default:\n      throw new Error('Only supported EOS are VDW and PR.');\n  }\n  return phaseProperties;\n}\n\nfunction getThermodynamicPropertiesPR(\n  z,\n  eosParameters,\n  molecularFluid,\n  pressure,\n  temperature,\n) {\n  const ecap =\n    eosParameters.S *\n    Math.sqrt(eosParameters.relativeTemperature / eosParameters.k);\n  const subeq1 = eosParameters.A / 2 / Math.sqrt(2) / eosParameters.B;\n\n  const subeq2 = Math.log(\n    (z + eosParameters.B * (1 + Math.sqrt(2))) /\n      (z + eosParameters.B * (1 - Math.sqrt(2))),\n  );\n  const residualEnthalpy = z - 1 - subeq1 * (1 + ecap) * subeq2;\n  const residualEntropy =\n    Math.log(z - eosParameters.B) - subeq1 * ecap * subeq2;\n\n  const { gibbs, fugacityCoefficient } = computeGibbsFugacity(\n    residualEnthalpy,\n    residualEntropy,\n  );\n  const molarDensity = computeMolarDensity(pressure, temperature, z);\n  return {\n    fugacityCoefficient: fugacityCoefficient,\n    fugacity: fugacityCoefficient * pressure,\n    residualEnthalpy: residualEnthalpy,\n    residualEntropy: residualEntropy,\n    residualGibbsEnergy: gibbs,\n    compressibilityFactor: z,\n    molarDensity: molarDensity,\n    density: computeDensity(molarDensity, molecularFluid),\n  };\n}\n\nfunction computeGibbsFugacity(enthalpy, entropy) {\n  const gibbs = enthalpy - entropy;\n  const fugacityCoefficient = Math.exp(gibbs);\n  return { gibbs, fugacityCoefficient };\n}\n\nfunction computeMolarDensity(pressure, temperature, compressibilityFactor) {\n  return pressure / (R * 1000 * temperature * compressibilityFactor);\n}\n\nfunction computeDensity(molarDensity, molecularFluid) {\n  return (molarDensity * molecularFluid.molarMass) / 1000;\n}\n","export default [\n  {\n    name: 'methane',\n    formula: 'CH4',\n    criticalTemperature: 190.56,\n    criticalPressure: 45.99,\n    accentricFactor: 0.012,\n    molarMass: 16.042504,\n    reference: {\n      citation:\n        'Yaws, Carl L. Thermophysical Properties of Chemicals and Hydrocarbons. 2nd ed. Austin, TX: Gulf Publishing Company, 2014. Print.',\n      isbn: '978-0-323-28659-6',\n    },\n  },\n  {\n    name: 'ethane',\n    formula: 'C2H6',\n    criticalTemperature: 305.32,\n    criticalPressure: 48.72,\n    accentricFactor: 0.1,\n    molarMass: 30.069126,\n    reference: {\n      citation:\n        'Yaws, Carl L. Thermophysical Properties of Chemicals and Hydrocarbons. 2nd ed. Austin, TX: Gulf Publishing Company, 2014. Print.',\n      isbn: '978-0-323-28659-6',\n    },\n  },\n  {\n    name: 'propane',\n    formula: 'C3H8',\n    criticalTemperature: 369.83,\n    criticalPressure: 42.48,\n    accentricFactor: 0.369,\n    molarMass: 44.095748,\n    reference: {\n      citation:\n        'Yaws, Carl L. Thermophysical Properties of Chemicals and Hydrocarbons. 2nd ed. Austin, TX: Gulf Publishing Company, 2014. Print.',\n      isbn: '978-0-323-28659-6',\n    },\n  },\n  {\n    name: 'butane',\n    formula: 'C4H',\n    criticalTemperature: 425.12,\n    criticalPressure: 37.96,\n    accentricFactor: 0.2,\n    molarMass: 49.050901,\n    reference: {\n      citation:\n        'Yaws, Carl L. Thermophysical Properties of Chemicals and Hydrocarbons. 2nd ed. Austin, TX: Gulf Publishing Company, 2014. Print.',\n      isbn: '978-0-323-28659-6',\n    },\n  },\n  {\n    name: '1-hexene',\n    formula: 'C6H12',\n    criticalTemperature: 504.0,\n    criticalPressure: 32.1,\n    accentricFactor: 0.28600000000000003,\n    molarMass: 84.159732,\n    reference: {\n      citation:\n        'Yaws, Carl L. Thermophysical Properties of Chemicals and Hydrocarbons. 2nd ed. Austin, TX: Gulf Publishing Company, 2014. Print.',\n      isbn: '978-0-323-28659-6',\n    },\n  },\n  {\n    name: 'hexane',\n    formula: 'C6H14',\n    criticalTemperature: 507.6,\n    criticalPressure: 30.25,\n    accentricFactor: 0.301,\n    molarMass: 86.17561400000001,\n    reference: {\n      citation:\n        'Yaws, Carl L. Thermophysical Properties of Chemicals and Hydrocarbons. 2nd ed. Austin, TX: Gulf Publishing Company, 2014. Print.',\n      isbn: '978-0-323-28659-6',\n    },\n  },\n  {\n    name: 'n-octane',\n    formula: 'C8H18',\n    criticalTemperature: 569.4,\n    criticalPressure: 24.97,\n    accentricFactor: 0.39799999999999996,\n    molarMass: 114.228858,\n    reference: {\n      citation:\n        'Yaws, Carl L. Thermophysical Properties of Chemicals and Hydrocarbons. 2nd ed. Austin, TX: Gulf Publishing Company, 2014. Print.',\n      isbn: '978-0-323-28659-6',\n    },\n  },\n  {\n    name: 'water',\n    formula: 'H2O',\n    criticalTemperature: 647.13,\n    criticalPressure: 220.55,\n    accentricFactor: 0.3449,\n    molarMass: 18.015287,\n    reference: {\n      citation:\n        'Yaws, Carl L. Thermophysical Properties of Chemicals and Hydrocarbons. 2nd ed. Austin, TX: Gulf Publishing Company, 2014. Print.',\n      isbn: '978-0-323-28659-6',\n    },\n  },\n  {\n    name: 'nitrogen',\n    formula: 'N2',\n    criticalTemperature: 126.2,\n    criticalPressure: 34.6,\n    accentricFactor: 0.0377,\n    molarMass: 28.013406,\n    reference: {\n      citation:\n        'Yaws, Carl L. Thermophysical Properties of Chemicals and Hydrocarbons. 2nd ed. Austin, TX: Gulf Publishing Company, 2014. Print.',\n      isbn: '978-0-323-28659-6',\n    },\n  },\n  {\n    name: 'helium',\n    formula: 'He',\n    criticalTemperature: 5.2,\n    criticalPressure: 2.28,\n    accentricFactor: 0.0,\n    molarMass: 4.002602,\n    reference: {\n      citation:\n        'Yaws, Carl L. Thermophysical Properties of Chemicals and Hydrocarbons. 2nd ed. Austin, TX: Gulf Publishing Company, 2014. Print.',\n      isbn: '978-0-323-28659-6',\n    },\n  },\n  {\n    name: 'neon',\n    formula: 'Ne',\n    criticalTemperature: 44.4,\n    criticalPressure: 26.53,\n    accentricFactor: 0.0,\n    molarMass: 20.1797,\n    reference: {\n      citation:\n        'Yaws, Carl L. Thermophysical Properties of Chemicals and Hydrocarbons. 2nd ed. Austin, TX: Gulf Publishing Company, 2014. Print.',\n      isbn: '978-0-323-28659-6',\n    },\n  },\n  {\n    name: 'argon',\n    formula: 'Ar',\n    criticalTemperature: 150.86,\n    criticalPressure: 48.98,\n    accentricFactor: 0.0,\n    molarMass: 39.948,\n    reference: {\n      citation:\n        'Yaws, Carl L. Thermophysical Properties of Chemicals and Hydrocarbons. 2nd ed. Austin, TX: Gulf Publishing Company, 2014. Print.',\n      isbn: '978-0-323-28659-6',\n    },\n  },\n  {\n    name: 'krypton',\n    formula: 'Kr',\n    criticalTemperature: 209.35,\n    criticalPressure: 55.02,\n    accentricFactor: 0.0,\n    molarMass: 83.798,\n    reference: {\n      citation:\n        'Yaws, Carl L. Thermophysical Properties of Chemicals and Hydrocarbons. 2nd ed. Austin, TX: Gulf Publishing Company, 2014. Print.',\n      isbn: '978-0-323-28659-6',\n    },\n  },\n  {\n    name: 'xenon',\n    formula: 'Xe',\n    criticalTemperature: 289.74,\n    criticalPressure: 58.4,\n    accentricFactor: 0.0,\n    molarMass: 131.293,\n    reference: {\n      citation:\n        'Yaws, Carl L. Thermophysical Properties of Chemicals and Hydrocarbons. 2nd ed. Austin, TX: Gulf Publishing Company, 2014. Print.',\n      isbn: '978-0-323-28659-6',\n    },\n  },\n  {\n    name: 'radon',\n    formula: 'Rn',\n    criticalTemperature: 377.0,\n    criticalPressure: 62.8,\n    accentricFactor: 0.0,\n    molarMass: 222.0176,\n    reference: {\n      citation:\n        'Yaws, Carl L. Thermophysical Properties of Chemicals and Hydrocarbons. 2nd ed. Austin, TX: Gulf Publishing Company, 2014. Print.',\n      isbn: '978-0-323-28659-6',\n    },\n  },\n];\n","export function handleError(thisMol) {\n  if (thisMol.length === 1) {\n    return thisMol[0];\n  } else if (thisMol.length === 0) {\n    throw new Error('No match with database.');\n  } else {\n    throw new Error('Result not unique!');\n  }\n}\n","import { molecularFluidFromFormula } from './from/molecularFluidFromFormula.js';\nimport { molecularFluidFromName } from './from/molecularFluidFromName.js';\n\n/**\n * This class stores properties of molecules\n *\n * @export\n * @class MolecularFluid\n */\nexport class MolecularFluid {\n  /**\n   *Creates an instance of MolecularFluid.\n   * @param {Number} molarMass in g/mol\n   * @param {Number} criticalTemperature in K\n   * @param {Number} criticalPressure in bar\n   * @param {Number} accentricFactor\n   * @memberof MolecularFluid\n   */\n  constructor(\n    molarMass,\n    criticalTemperature,\n    criticalPressure,\n    accentricFactor,\n  ) {\n    this.molarMass = molarMass;\n    this.criticalTemperature = criticalTemperature;\n    this.criticalPressure = criticalPressure;\n    this.accentricFactor = accentricFactor;\n  }\n}\n\nMolecularFluid.fromName = molecularFluidFromName;\nMolecularFluid.fromFormula = molecularFluidFromFormula;\n","import moleculeProperties from '../../data/molecules';\nimport { MolecularFluid } from '../molecularFluid.js';\n\nimport { handleError } from './handleError.js';\n\nexport function molecularFluidFromName(molName) {\n  let thisMol = moleculeProperties.filter((dict) => {\n    return dict.name === molName;\n  });\n\n  thisMol = handleError(thisMol);\n  return new MolecularFluid(\n    thisMol.molarMass,\n    thisMol.criticalTemperature,\n    thisMol.criticalPressure,\n    thisMol.accentricFactor,\n  );\n}\n","import moleculeProperties from '../../data/molecules';\nimport { MolecularFluid } from '../molecularFluid.js';\n\nimport { handleError } from './handleError.js';\n\nexport function molecularFluidFromFormula(molFormula) {\n  let thisMol = moleculeProperties.filter((dict) => {\n    return dict.formula === molFormula;\n  });\n\n  thisMol = handleError(thisMol);\n  return new MolecularFluid(\n    thisMol.molarMass,\n    thisMol.criticalTemperature,\n    thisMol.criticalPressure,\n    thisMol.accentricFactor,\n  );\n}\n"],"names":["R","EOSParameters","constructor","molecularFluid","options","parameters","temperature","eos","A","B","alpha","beta","gamma","p","q","Delta","a","criticalTemperature","criticalPressure","b","tc","pc","S","k","u","w","getVDWParameters","s","accentricFactor","Math","sqrt","getPRParameters","getRKParameters","getRKSParameters","Error","getPhasefromPhi","phis","length","computeDensity","molarDensity","molarMass","name","formula","reference","citation","isbn","handleError","thisMol","MolecularFluid","fromName","molName","moleculeProperties","filter","dict","fromFormula","molFormula","pressure","volume","Number","isFinite","validateInput","eosParameters","relativeTemperature","getPressure","updateEOSParameters","zList","xSol","cbrt","solveCardano","subeq","acos","offset","cos","PI","push","sort","splice","solveTrigonometric","solveZ","phaseProperties","forEach","z","ecap","subeq1","subeq2","log","residualEnthalpy","residualEntropy","gibbs","fugacityCoefficient","enthalpy","entropy","exp","computeGibbsFugacity","compressibilityFactor","computeMolarDensity","fugacity","residualGibbsEnergy","density","getThermodynamicPropertiesPR","getThermodynamicProperties","properties","inPhase"],"mappings":"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"}